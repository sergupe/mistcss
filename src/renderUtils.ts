import { Component, Components } from './index.js'

function renderProps(component: Component): string {
  return Object.keys(component.data)
    .map((attribute) => {
      const values = component.data[attribute]
      if (Array.isArray(values)) {
        return `${attribute}?: ${values
          .map((value) => `'${value}'`)
          .join(' | ')}`
      }

      return `  ${attribute}?: boolean`
    })
    .join('\n')
}

function renderComponent(components: Components, name: string): string {
  const component = components[name]
  if (component === undefined) {
    return ''
  }
  return `type ${name}Props = {
    children?: React.ReactNode
    ${renderProps(component)}
  } & JSX.IntrinsicElements['${component.tag}']
  
  export function ${name}({ ${[
    'children',
    ...Object.keys(component.data),
    '...props',
  ].join(', ')} }: ${name}Props) {
    return (
      <${component.tag} {...props} className="${name}" ${Object.keys(
        component.data,
      )
        .map((key) => `data-${key}={${key}}`)
        .join(' ')}>
        {children}
      </${component.tag}>
    )
  }
  `
}

export function render(name: string, components: Components): string {
  return `// Generated by MistCSS, do not modify
  import './${name}.mist.css'
  
  ${Object.keys(components)
    .map((key) => renderComponent(components, key))
    .join('\n')
    .trim()}
  `
}
